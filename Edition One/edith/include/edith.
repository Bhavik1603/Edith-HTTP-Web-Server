#ifndef ___EDITH
#define ___EDITH 16
#include <iostream>
#include <map>
namespace edith
{
    using namespace std;

    class Request
    {
    public:
        char *method;
        char *resource;
        char isClientSideTechnologyResource;
        char *mimeType;
        int dataCount;
        char **data;
        string forwardTo;
        map<string, string> keyValues;
        void setKeyValue(string k, string v);
        string getValue(string k);
        string get(string name); // to extract data that has arrived in request
        void forward(string forwardTo);
        string decode(string requestURL);
    };

    class Response
    {
    private:
        int clientSocketDescriptor;
        bool isClosed;
        bool headerCreated;
        void createHeader();

    public:
        Response(int clientSocketDescriptor);
        void write(const char *str);
        void write(string str);
        // you need to overload more methods for primitive types
        void close();
    };

    class EdithWebServer
    {
    private:
        int portNumber;
        // char *url;
        // void (*ptrOnRequest)(Request &, Response &);
        map<string, void (*)(Request &, Response &)> requestMappings;

    public:
        EdithWebServer(int portNumber);
        ~EdithWebServer();
        void start();
        void onRequest(string url, void (*ptrOnRequest)(Request &, Response &));
    };
}
#endif
